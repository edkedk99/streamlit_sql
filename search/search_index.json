{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"streamlit_sql","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This package shows a CRUD frontend to a database using sqlalchemy in a streamlit app. With just one line of code, show the data as table and allow the user to read, filter, update, create and delete rows with many useful features.</p>"},{"location":"#demo","title":"Demo","text":"<p>See the package in action here.</p>"},{"location":"#features","title":"Features","text":""},{"location":"#read","title":"READ","text":"<ul> <li>Display as a regular st.dataframe</li> <li>Add pagination, displaying only a set of rows each time</li> <li>Set the dataframe to be displayed using standard sqlalchemy select statement, where you can JOIN, ORDER BY, WHERE, etc.</li> <li>Add a column to show the rolling sum of a numeric column</li> <li>Conditional styling if the DataFrame based on each row value. For instance, changing its background color</li> </ul>"},{"location":"#filter","title":"FILTER","text":"<ul> <li>Filter the data by some columns before presenting the table.</li> <li>Let users filter the columns by selecting conditions in the filter expander</li> <li>Give possible candidates when filtering using existing values for the columns</li> <li>Let users select ForeignKey's values using the string representation of the foreign table, instead of its id number</li> </ul>"},{"location":"#update","title":"UPDATE","text":"<ul> <li>Users update rows with a dialog opened by selecting the row and clicking the icon</li> <li>Text columns offers candidates from existing values</li> <li>ForeignKey columns are added by the string representation instead of its id number</li> <li>In Update form, list all ONE-TO-MANY related rows with pagination, where you can directly create and delete related table rows. </li> </ul>"},{"location":"#create","title":"CREATE","text":"<ul> <li>Users create new rows with a dialog opened by clicking the create button</li> <li>Text columns offers candidates from existing values</li> <li>Hide columns to fill by offering default values</li> <li>ForeignKey columns are added by the string representation instead of its id number</li> </ul>"},{"location":"#delete","title":"DELETE","text":"<ul> <li>Delete one or multiple rows by selecting in DataFrame and clicking the corresponding button. I dialog will list selected rows and confirm deletion.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>All the requirements you should probably have anyway.</p> <ol> <li>streamlit and sqlalchemy</li> <li>Sqlalchemy models needs a str method</li> <li>Id column should be called \"id\"</li> <li>Relationships should be added for all ForeignKey columns </li> </ol>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>Install the package using pip:</p> <pre><code>pip install streamlit_sql\n</code></pre> <p>Run <code>show_sql_ui</code> as the example below:</p> <pre><code>from streamlit_sql import show_sql_ui\nfrom sqlalchemy import select\n\nconn = st.connection(\"sql\", url=\"&lt;db_url&gt;\")\n\nstmt = (\n    select(\n        db.Invoice.id,\n        db.Invoice.Date,\n        db.Invoice.amount,\n        db.Client.name,\n    )\n    .join(db.Client)\n    .where(db.Invoice.amount &gt; 1000)\n    .order_by(db.Invoice.date)\n)\n\nshow_sql_ui(conn=conn,\n            read_instance=stmt,\n            edit_create_model=db.Invoice,\n            available_filter=[\"name\"],\n            rolling_total_column=\"amount\",\n)\n\nshow_sql_ui(conn, model_opts)\n</code></pre> <p>Warning</p> <p>In the statement, always include the primary_key column, that should be named id</p>"},{"location":"#interface","title":"Interface","text":"<ul> <li>Filter: Open the \"Filter\" expander and fill the inputs</li> <li>Add row: Click on \"plus\" button (no dataframe row can be selected)</li> <li>Edit row: Click on \"pencil\" button (one and only one dataframe row should be selected)</li> <li>Delete row: Click on \"trash\" button (one or more dataframe rows should be selected)</li> </ul>"},{"location":"#customize","title":"Customize","text":"<p>You can adjust the CRUD interface by the select statement you provide to read_instance arg and giving optional arguments to the show_sql_ui function. See the docstring for more information or at documentation webpage:</p>"},{"location":"#only-create-or-update-form","title":"Only create or update form","text":"<p>You can display just a create or update/delete form without the read interface using functions show_updade, and show_create.</p>"},{"location":"api/","title":"API","text":""},{"location":"api/#api","title":"API","text":""},{"location":"api/#streamlit_sql.SqlUi","title":"<code>SqlUi</code>","text":"<p>Show A CRUD interface in a Streamlit Page</p> <p>See in init method detailed descriptions of arguments and properties</p> <p>It also offers the following properties:</p> Source code in <code>streamlit_sql/sql_iu.py</code> <pre><code>class SqlUi:\n    \"\"\"Show A CRUD interface in a Streamlit Page\n\n    See in __init__ method detailed descriptions of arguments and properties\n\n    It also offers the following properties:\n\n\n    \"\"\"\n\n    def __init__(\n        self,\n        conn: SQLConnection,\n        read_instance,\n        edit_create_model: type[DeclarativeBase],\n        available_filter: list[str] | None = None,\n        edit_create_default_values: dict | None = None,\n        rolling_total_column: str | None = None,\n        read_use_container_width: bool = False,\n        hide_id: bool = True,\n        base_key: str = \"\",\n        style_fn: Callable[[pd.Series], list[str]] | None = None,\n        update_show_many: bool = False,\n    ):\n        \"\"\"Init method\n\n        Arguments:\n            conn (SQLConnection): A sqlalchemy connection created with st.connection(\\\"sql\\\", url=\\\"&lt;sqlalchemy url&gt;\\\")\n            read_instance (Select | CTE | Model): The sqlalchemy select statement to display or a CTE. Choose columns to display , join, query or order.If selecting columns, you need to add the id column. If a Model, it will select all columns.\n            edit_create_default_values (dict, optional): A dict with column name as keys and values to be default. When the user clicks to create a row, those columns will not show on the form and its value will be added to the Model object\n            available_filter (list[str], optional): Define wich columns the user will be able to filter in the sidebar. Defaults to all\n            rolling_total_column (str, optional): A numeric column name of the Model. A new column will be displayed with the rolling sum of these column\n            read_use_container_width (bool, optional): add use_container_width to st.dataframe args. Default to False\n            hide_id (bool, optional): The id column will not be displayed if set to True. Defaults to True\n            base_key (str, optional): A prefix to add to widget's key argument.\n            style_fn (Callable[[pd.Series], list[str]], optional): A function that style the DataFrame that receives the a Series representing a DataFrame row as argument and should return a list of string with the css property of the size of the number of columns of the DataFrame\n\n        Attributes:\n            df (pd.Dataframe): The Dataframe displayed in the screen\n            selected_rows (list[int]): The position of selected rows. This is not the row id.\n            qtty_rows (int): The quantity of all rows after filtering\n        \"\"\"\n        self.conn = conn\n        self.read_instance = read_instance\n        self.edit_create_model = edit_create_model\n        self.available_filter = available_filter or []\n        self.edit_create_default_values = edit_create_default_values or {}\n        self.rolling_total_column = rolling_total_column\n        self.read_use_container_width = read_use_container_width\n        self.hide_id = hide_id\n        self.base_key = base_key\n        self.style_fn = style_fn\n        self.update_show_many = update_show_many\n\n        self.cte = self.get_cte()\n        self.rolling_pretty_name = lib.get_pretty_name(self.rolling_total_column or \"\")\n\n        # Bootstrap\n        self.set_initial_state()\n        self.set_structure()\n        self.notification()\n\n        # Create UI\n        col_filter = self.filter()\n        stmt_no_pag = read_cte.get_stmt_no_pag(self.cte, col_filter)\n        qtty_rows = read_cte.get_qtty_rows(self.conn, stmt_no_pag)\n        items_per_page, page = self.pagination(qtty_rows)\n        stmt_pag = read_cte.get_stmt_pag(stmt_no_pag, items_per_page, page)\n        initial_balance = self.get_initial_balance(col_filter)\n        df = self.get_df(stmt_pag, initial_balance)\n        selection_state = self.show_df(df)\n        rows_selected = self.get_rows_selected(selection_state)\n\n        # CRUD\n        self.crud(df, rows_selected)\n        ss.stsql_opened = False\n\n        # Returns\n        self.df = df\n        self.rows_selected = rows_selected\n        self.qtty_rows = qtty_rows\n\n    def set_initial_state(self):\n        lib.set_state(\"stsql_updated\", 1)\n        lib.set_state(\"stsql_update_ok\", None)\n        lib.set_state(\"stsql_update_message\", None)\n        lib.set_state(\"stsql_opened\", False)\n\n    def set_structure(self):\n        self.header_container = st.container()\n        self.data_container = st.container()\n        self.pag_container = st.container()\n\n        table_name = lib.get_pretty_name(self.edit_create_model.__tablename__)\n        self.header_container.header(table_name, divider=\"orange\")\n\n        self.expander_container = self.header_container.expander(\n            \"Filter\",\n            icon=\":material/search:\",\n        )\n\n        self.filter_container = self.header_container.container()\n\n        if self.rolling_total_column:\n            self.saldo_toggle_col, self.saldo_value_col = self.header_container.columns(\n                2\n            )\n\n        self.btns_container = self.header_container.container()\n\n    def notification(self):\n        if ss.stsql_update_ok is True:\n            self.header_container.success(\n                ss.stsql_update_message, icon=\":material/thumb_up:\"\n            )\n        if ss.stsql_update_ok is False:\n            self.header_container.error(\n                ss.stsql_update_message, icon=\":material/thumb_down:\"\n            )\n\n    def get_cte(self):\n        if isinstance(self.read_instance, Select):\n            cte = self.read_instance.cte()\n        elif isinstance(self.read_instance, CTE):\n            cte = self.read_instance\n        else:\n            cte = select(self.read_instance).cte()\n\n        return cte\n\n    def filter(self):\n        filter_colsname = self.available_filter\n        if len(filter_colsname) == 0:\n            filter_colsname = [\n                col.description for col in self.cte.columns if col.description\n            ]\n\n        with self.conn.session as s:\n            existing = read_cte.get_existing_values(\n                _session=s,\n                cte=self.cte,\n                updated=ss.stsql_updated,\n                available_col_filter=filter_colsname,\n            )\n\n        col_filter = read_cte.ColFilter(\n            self.expander_container,\n            self.cte,\n            existing,\n            filter_colsname,\n            self.base_key,\n        )\n        if str(col_filter) != \"\":\n            self.filter_container.write(col_filter)\n\n        return col_filter\n\n    def pagination(self, qtty_rows: int):\n        with self.pag_container:\n            items_per_page, page = read_cte.show_pagination(\n                qtty_rows,\n                OPTS_ITEMS_PAGE,\n                self.base_key,\n            )\n\n        return items_per_page, page\n\n    def get_initial_balance(self, col_filter: read_cte.ColFilter):\n        if self.rolling_total_column is None:\n            return 0\n\n        saldo_toogle = self.saldo_toggle_col.toggle(\n            f\"Adiciona Saldo Devedor em {self.rolling_pretty_name}\",\n            value=True,\n            key=f\"{self.base_key}_saldo_toggle_sql_ui\",\n        )\n\n        if not saldo_toogle:\n            return 0\n\n        first_row_id: int | None = None\n        if not self.df.empty:\n            first_row_id = int(self.df.iloc[0].id)\n\n        no_dt_filters = col_filter.no_dt_filters\n        stmt_no_pag_dt = read_cte.get_stmt_no_pag_dt(self.cte, no_dt_filters)\n\n        with self.conn.session as s:\n            initial_balance = read_cte.initial_balance(\n                _session=s,\n                stmt_no_pag_dt=stmt_no_pag_dt,\n                col_filter=col_filter,\n                rolling_total_column=self.rolling_total_column,\n                first_row_id=first_row_id,\n            )\n\n        self.saldo_value_col.subheader(\n            f\"Saldo Anterior {self.rolling_pretty_name}: {initial_balance:,.2f}\"\n        )\n\n        return initial_balance\n\n    def get_df(\n        self,\n        stmt_pag: Select,\n        initial_balance: float,\n    ):\n        with self.conn.connect() as c:\n            df = pd.read_sql(stmt_pag, c)\n\n        if self.rolling_total_column is None:\n            return df\n\n        rolling_col_name = f\"Balance {self.rolling_pretty_name}\"\n        df[rolling_col_name] = df[self.rolling_total_column].cumsum() + initial_balance\n\n        return df\n\n    def show_df(self, df: pd.DataFrame):\n        if df.empty:\n            st.header(\":red[Tabela Vazia]\")\n            return None\n\n        column_order = None\n        if self.hide_id:\n            column_order = [colname for colname in df.columns if colname != \"id\"]\n\n        df_style = df\n        if self.style_fn is not None:\n            df_style = df.style.apply(self.style_fn, axis=1)\n\n        selection_state = self.data_container.dataframe(\n            df_style,\n            use_container_width=self.read_use_container_width,\n            height=650,\n            hide_index=True,\n            column_order=column_order,\n            on_select=\"rerun\",\n            selection_mode=\"multi-row\",\n            key=f\"{self.base_key}_df_sql_ui\",\n        )\n        return selection_state\n\n    def get_rows_selected(self, selection_state: DataframeState | None):\n        rows_pos = []\n        if (\n            selection_state\n            and \"selection\" in selection_state\n            and \"rows\" in selection_state[\"selection\"]\n        ):\n            rows_pos = selection_state[\"selection\"][\"rows\"]\n\n        return rows_pos\n\n    def crud(self, df: pd.DataFrame, rows_selected: list[int]):\n        qtty_rows = len(rows_selected)\n        action = update_model.action_btns(\n            self.btns_container,\n            qtty_rows,\n            ss.stsql_opened,\n        )\n\n        if action == \"add\":\n            create_row = create_delete_model.CreateRow(\n                conn=self.conn,\n                Model=self.edit_create_model,\n                default_values=self.edit_create_default_values,\n            )\n            create_row.show_dialog()\n        elif action == \"edit\":\n            selected_pos = rows_selected[0]\n            row_id = int(self.df.iloc[selected_pos][\"id\"])\n            update_row = update_model.UpdateRow(\n                conn=self.conn,\n                Model=self.edit_create_model,\n                row_id=row_id,\n                default_values=self.edit_create_default_values,\n                update_show_many=self.update_show_many,\n            )\n            update_row.show_dialog()\n        elif action == \"delete\":\n            rows_id = df.iloc[rows_selected].id.astype(int).to_list()\n            delete_rows = create_delete_model.DeleteRows(\n                conn=self.conn,\n                Model=self.edit_create_model,\n                rows_id=rows_id,\n            )\n            delete_rows.show_dialog()\n</code></pre>"},{"location":"api/#streamlit_sql.SqlUi.__init__","title":"<code>__init__(conn, read_instance, edit_create_model, available_filter=None, edit_create_default_values=None, rolling_total_column=None, read_use_container_width=False, hide_id=True, base_key='', style_fn=None, update_show_many=False)</code>","text":"<p>Init method</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>SQLConnection</code> <p>A sqlalchemy connection created with st.connection(\"sql\", url=\"\") required <code>read_instance</code> <code>Select | CTE | Model</code> <p>The sqlalchemy select statement to display or a CTE. Choose columns to display , join, query or order.If selecting columns, you need to add the id column. If a Model, it will select all columns.</p> required <code>edit_create_default_values</code> <code>dict</code> <p>A dict with column name as keys and values to be default. When the user clicks to create a row, those columns will not show on the form and its value will be added to the Model object</p> <code>None</code> <code>available_filter</code> <code>list[str]</code> <p>Define wich columns the user will be able to filter in the sidebar. Defaults to all</p> <code>None</code> <code>rolling_total_column</code> <code>str</code> <p>A numeric column name of the Model. A new column will be displayed with the rolling sum of these column</p> <code>None</code> <code>read_use_container_width</code> <code>bool</code> <p>add use_container_width to st.dataframe args. Default to False</p> <code>False</code> <code>hide_id</code> <code>bool</code> <p>The id column will not be displayed if set to True. Defaults to True</p> <code>True</code> <code>base_key</code> <code>str</code> <p>A prefix to add to widget's key argument.</p> <code>''</code> <code>style_fn</code> <code>Callable[[Series], list[str]]</code> <p>A function that style the DataFrame that receives the a Series representing a DataFrame row as argument and should return a list of string with the css property of the size of the number of columns of the DataFrame</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>df</code> <code>Dataframe</code> <p>The Dataframe displayed in the screen</p> <code>selected_rows</code> <code>list[int]</code> <p>The position of selected rows. This is not the row id.</p> <code>qtty_rows</code> <code>int</code> <p>The quantity of all rows after filtering</p> Source code in <code>streamlit_sql/sql_iu.py</code> <pre><code>def __init__(\n    self,\n    conn: SQLConnection,\n    read_instance,\n    edit_create_model: type[DeclarativeBase],\n    available_filter: list[str] | None = None,\n    edit_create_default_values: dict | None = None,\n    rolling_total_column: str | None = None,\n    read_use_container_width: bool = False,\n    hide_id: bool = True,\n    base_key: str = \"\",\n    style_fn: Callable[[pd.Series], list[str]] | None = None,\n    update_show_many: bool = False,\n):\n    \"\"\"Init method\n\n    Arguments:\n        conn (SQLConnection): A sqlalchemy connection created with st.connection(\\\"sql\\\", url=\\\"&lt;sqlalchemy url&gt;\\\")\n        read_instance (Select | CTE | Model): The sqlalchemy select statement to display or a CTE. Choose columns to display , join, query or order.If selecting columns, you need to add the id column. If a Model, it will select all columns.\n        edit_create_default_values (dict, optional): A dict with column name as keys and values to be default. When the user clicks to create a row, those columns will not show on the form and its value will be added to the Model object\n        available_filter (list[str], optional): Define wich columns the user will be able to filter in the sidebar. Defaults to all\n        rolling_total_column (str, optional): A numeric column name of the Model. A new column will be displayed with the rolling sum of these column\n        read_use_container_width (bool, optional): add use_container_width to st.dataframe args. Default to False\n        hide_id (bool, optional): The id column will not be displayed if set to True. Defaults to True\n        base_key (str, optional): A prefix to add to widget's key argument.\n        style_fn (Callable[[pd.Series], list[str]], optional): A function that style the DataFrame that receives the a Series representing a DataFrame row as argument and should return a list of string with the css property of the size of the number of columns of the DataFrame\n\n    Attributes:\n        df (pd.Dataframe): The Dataframe displayed in the screen\n        selected_rows (list[int]): The position of selected rows. This is not the row id.\n        qtty_rows (int): The quantity of all rows after filtering\n    \"\"\"\n    self.conn = conn\n    self.read_instance = read_instance\n    self.edit_create_model = edit_create_model\n    self.available_filter = available_filter or []\n    self.edit_create_default_values = edit_create_default_values or {}\n    self.rolling_total_column = rolling_total_column\n    self.read_use_container_width = read_use_container_width\n    self.hide_id = hide_id\n    self.base_key = base_key\n    self.style_fn = style_fn\n    self.update_show_many = update_show_many\n\n    self.cte = self.get_cte()\n    self.rolling_pretty_name = lib.get_pretty_name(self.rolling_total_column or \"\")\n\n    # Bootstrap\n    self.set_initial_state()\n    self.set_structure()\n    self.notification()\n\n    # Create UI\n    col_filter = self.filter()\n    stmt_no_pag = read_cte.get_stmt_no_pag(self.cte, col_filter)\n    qtty_rows = read_cte.get_qtty_rows(self.conn, stmt_no_pag)\n    items_per_page, page = self.pagination(qtty_rows)\n    stmt_pag = read_cte.get_stmt_pag(stmt_no_pag, items_per_page, page)\n    initial_balance = self.get_initial_balance(col_filter)\n    df = self.get_df(stmt_pag, initial_balance)\n    selection_state = self.show_df(df)\n    rows_selected = self.get_rows_selected(selection_state)\n\n    # CRUD\n    self.crud(df, rows_selected)\n    ss.stsql_opened = False\n\n    # Returns\n    self.df = df\n    self.rows_selected = rows_selected\n    self.qtty_rows = qtty_rows\n</code></pre>"},{"location":"api/#streamlit_sql.show_create","title":"<code>show_create(conn, Model, default_values=None)</code>","text":"<p>Show a form to add a new row to the database table of the choosen sqlalchemy Model</p> <p>This function should be used to just show a form and a button to add a row to the table without the other features of this package</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>SQLConnection</code> <p>A sqlalchemy connection created with st.connection(\"sql\", url=\"\") required <code>Model</code> <code>type[DeclarativeBase]</code> <p>The sqlalchemy Model of the table</p> required <code>default_values</code> <code>dict</code> <p>A dict with column name as keys and values to be default. The form will not display those columns and its value will be added to the Model object</p> <code>None</code> Source code in <code>streamlit_sql/__init__.py</code> <pre><code>def show_create(\n    conn: SQLConnection,\n    Model: type[DeclarativeBase],\n    default_values: dict | None = None,\n):\n    \"\"\"Show a form to add a new row to the database table of the choosen sqlalchemy Model\n\n    This function should be used to just show a form and a button to add a row to the table without the other features of this package\n\n    Args:\n        conn (SQLConnection): A sqlalchemy connection created with st.connection(\\\"sql\\\", url=\\\"&lt;sqlalchemy url&gt;\\\")\n        Model (type[DeclarativeBase]): The sqlalchemy Model of the table\n        default_values (dict, optional): A dict with column name as keys and values to be default. The form will not display those columns and its value will be added to the Model object\n\n    \"\"\"\n    if default_values is None:\n        default_values = {}\n\n    create_row = CreateRow(\n        conn=conn,\n        Model=Model,\n        default_values=default_values,\n    )\n    pretty_name = get_pretty_name(Model.__tablename__)\n    create_row.show(pretty_name)\n</code></pre>"},{"location":"api/#streamlit_sql.show_sql_ui","title":"<code>show_sql_ui(conn, read_instance, edit_create_model, available_filter=None, edit_create_default_values=None, rolling_total_column=None, read_use_container_width=False, hide_id=True, base_key='', style_fn=None, update_show_many=False)</code>","text":"<p>Show A CRUD interface in a Streamlit Page</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>SQLConnection</code> <p>A sqlalchemy connection created with st.connection(\"sql\", url=\"\") required <code>read_instance</code> <code>Select | CTE | Model</code> <p>The sqlalchemy select statement to display or a CTE. Choose columns to display , join, query or order.If selecting columns, you need to add the id column. If a Model, it will select all columns.</p> required <code>edit_create_default_values</code> <code>dict</code> <p>A dict with column name as keys and values to be default. When the user clicks to create a row, those columns will not show on the form and its value will be added to the Model object</p> <code>None</code> <code>available_filter</code> <code>list[str]</code> <p>Define wich columns the user will be able to filter in the sidebar. Defaults to all</p> <code>None</code> <code>rolling_total_column</code> <code>str</code> <p>A numeric column name of the Model. A new column will be displayed with the rolling sum of these column</p> <code>None</code> <code>read_use_container_width</code> <code>bool</code> <p>add use_container_width to st.dataframe args. Default to False</p> <code>False</code> <code>hide_id</code> <code>bool</code> <p>The id column will not be displayed if set to True. Defaults to True</p> <code>True</code> <code>base_key</code> <code>str</code> <p>A prefix to add to widget's key argument.</p> <code>''</code> <code>style_fn</code> <code>Callable[[Series], list[str]]</code> <p>A function that style the DataFrame that receives the a Series representing a DataFrame row as argument and should return a list of string with the css property of the size of the number of columns of the DataFrame</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[DataFrame, list[int]] | None</code> <p>tuple[pd.DataFrame, list[int]]: A Tuple with the DataFrame displayed as first item and a list of rows numbers selected as second item.</p> <p>Examples:</p> <p>```python conn = st.connection(\"sql\", db_url)</p> <p>stmt = (     select(         db.Invoice.id,         db.Invoice.Date,         db.Invoice.amount,         db.Client.name,     )     .join(db.Client)     .where(db.Invoice.amount &gt; 1000)</p> <p>.       .order_by(db.Invoice.date)     )</p> <pre><code>show_sql_ui(conn=conn,\n            read_instance=stmt,\n            edit_create_model=db.Invoice,\n            available_filter=[\"name\"],\n            rolling_total_column=\"amount\",\n)\n\n```\n</code></pre> Source code in <code>streamlit_sql/sql_iu.py</code> <pre><code>def show_sql_ui(\n    conn: SQLConnection,\n    read_instance,\n    edit_create_model: type[DeclarativeBase],\n    available_filter: list[str] | None = None,\n    edit_create_default_values: dict | None = None,\n    rolling_total_column: str | None = None,\n    read_use_container_width: bool = False,\n    hide_id: bool = True,\n    base_key: str = \"\",\n    style_fn: Callable[[pd.Series], list[str]] | None = None,\n    update_show_many: bool = False,\n) -&gt; tuple[pd.DataFrame, list[int]] | None:\n    \"\"\"Show A CRUD interface in a Streamlit Page\n\n    Args:\n        conn (SQLConnection): A sqlalchemy connection created with st.connection(\\\"sql\\\", url=\\\"&lt;sqlalchemy url&gt;\\\")\n        read_instance (Select | CTE | Model): The sqlalchemy select statement to display or a CTE. Choose columns to display , join, query or order.If selecting columns, you need to add the id column. If a Model, it will select all columns.\n        edit_create_default_values (dict, optional): A dict with column name as keys and values to be default. When the user clicks to create a row, those columns will not show on the form and its value will be added to the Model object\n        available_filter (list[str], optional): Define wich columns the user will be able to filter in the sidebar. Defaults to all\n        rolling_total_column (str, optional): A numeric column name of the Model. A new column will be displayed with the rolling sum of these column\n        read_use_container_width (bool, optional): add use_container_width to st.dataframe args. Default to False\n        hide_id (bool, optional): The id column will not be displayed if set to True. Defaults to True\n        base_key (str, optional): A prefix to add to widget's key argument.\n        style_fn (Callable[[pd.Series], list[str]], optional): A function that style the DataFrame that receives the a Series representing a DataFrame row as argument and should return a list of string with the css property of the size of the number of columns of the DataFrame\n\n    Returns:\n        tuple[pd.DataFrame, list[int]]: A Tuple with the DataFrame displayed as first item and a list of rows numbers selected as second item.\n\n    Examples:\n        ```python\n        conn = st.connection(\"sql\", db_url)\n\n        stmt = (\n            select(\n                db.Invoice.id,\n                db.Invoice.Date,\n                db.Invoice.amount,\n                db.Client.name,\n            )\n            .join(db.Client)\n            .where(db.Invoice.amount &gt; 1000)\n    .       .order_by(db.Invoice.date)\n        )\n\n        show_sql_ui(conn=conn,\n                    read_instance=stmt,\n                    edit_create_model=db.Invoice,\n                    available_filter=[\"name\"],\n                    rolling_total_column=\"amount\",\n        )\n\n        ```\n\n\n    \"\"\"\n    ui = SqlUi(\n        conn=conn,\n        read_instance=read_instance,\n        edit_create_model=edit_create_model,\n        available_filter=available_filter,\n        edit_create_default_values=edit_create_default_values,\n        rolling_total_column=rolling_total_column,\n        read_use_container_width=read_use_container_width,\n        hide_id=hide_id,\n        base_key=base_key,\n        style_fn=style_fn,\n        update_show_many=update_show_many,\n    )\n\n    return ui.df, ui.rows_selected\n</code></pre>"},{"location":"api/#streamlit_sql.show_update","title":"<code>show_update(conn, Model, row_id, default_values=None)</code>","text":"<p>Show a form to update or delete a row to the database table of the choosen sqlalchemy Model</p> <p>This function should be used to just show a form and buttons to update or delete a row to the table without the other features of this package</p> <p>Parameters:</p> Name Type Description Default <code>conn</code> <code>SQLConnection</code> <p>A sqlalchemy connection created with st.connection(\"sql\", url=\"\") required <code>Model</code> <code>type[DeclarativeBase]</code> <p>The sqlalchemy Model of the table</p> required <code>default_values</code> <code>dict</code> <p>A dict with column name as keys and values to be default. The form will not display those columns and its value will be added to the Model object</p> <code>None</code> Source code in <code>streamlit_sql/__init__.py</code> <pre><code>def show_update(\n    conn: SQLConnection,\n    Model: type[DeclarativeBase],\n    row_id: int,\n    default_values: dict | None = None,\n):\n    \"\"\"Show a form to update or delete a row to the database table of the choosen sqlalchemy Model\n\n    This function should be used to just show a form and buttons to update or delete a row to the table without the other features of this package\n\n    Args:\n        conn (SQLConnection): A sqlalchemy connection created with st.connection(\\\"sql\\\", url=\\\"&lt;sqlalchemy url&gt;\\\")\n        Model (type[DeclarativeBase]): The sqlalchemy Model of the table\n        default_values (dict, optional): A dict with column name as keys and values to be default. The form will not display those columns and its value will be added to the Model object\n\n    \"\"\"\n    if default_values is None:\n        default_values = {}\n\n    update_row = UpdateRow(\n        conn=conn,\n        Model=Model,\n        row_id=row_id,\n        default_values=default_values,\n    )\n    update_row.show()\n</code></pre>"}]}